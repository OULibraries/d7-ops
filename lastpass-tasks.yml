---
- name: Check for lpass in path
  command: which lpass
- name: Verify user is logged into lastpass-cli
  shell: lpass ls
- name: Check for MariaDB root credentials
  shell: >
    lpass show 'myvagrant/mariadb/root' | grep Username | cut -d ' ' -f 2 | xargs
  register: mariadb_get_root_user
- name: Set MariaDB root credentials
  shell: >
    lpass generate --sync=now --username=root 'myvagrant/mariadb/root' --no-symbols 32
  register: mariadb_set_root_pw
  when: mariadb_get_root_user.stdout != 'root'
- name: Fetch MariaDB root credentials
  shell: >
    lpass show --sync=now 'myvagrant/mariadb/root' | grep Password | cut -d ' ' -f 2 | xargs
  register: mariadb_get_root_pw
- name: Set MariaDB root password as fact
  set_fact:
    mariadb_root: "{{ mariadb_get_root_pw.stdout }}"

- name: Check for libacct credentials
  shell: >
    lpass show 'myvagrant/unix/libacct' | grep Username | cut -d ' ' -f 2 | xargs
  register: libacct_get_user
- name: Set libacct password
  shell: >
    lpass generate --sync=now --username=libacct 'myvagrant/unix/libacct' --no-symbols 32
  register: libacct_set_pw
  when: libacct_get_user.stdout != 'libacct'
- name: Fetch libacct password
  shell: >
    lpass show --sync=now 'myvagrant/unix/libacct' | grep Password | cut -d ' ' -f 2 | xargs
  register: libacct_get_pw
- name: Crypt libacct password for unix
  shell: >
    /usr/bin/python -c "from passlib.hash import sha512_crypt; import getpass; print sha512_crypt.encrypt('{{ libacct_get_pw.stdout  }}')"
  register: libacct_crypt_pw
- name: Set libacct password crypt as fact
  set_fact:
    libacct_pw_crypt: "{{ libacct_crypt_pw.stdout }}"
